// Code generated by sqlc. DO NOT EDIT.
// source: employee.sql

package db

import (
	"context"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employee(
    code,
    name,
    email,
    phone_number
) VALUES(
    $1, $2, $3, $4
) RETURNING id, code, name, email, phone_number, created_at
`

type CreateEmployeeParams struct {
	Code        string `json:"code"`
	Name        string `json:"name"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, createEmployee,
		arg.Code,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employee
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, code, name, email, phone_number, created_at FROM employee
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetEmployee(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.CreatedAt,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, code, name, email, phone_number, created_at FROM employee
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEmployeesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmployees(ctx context.Context, arg ListEmployeesParams) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployees, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Email,
			&i.PhoneNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE employee
SET name = $2,
email = $3,
phone_number = $4
WHERE id = $1
RETURNING id, code, name, email, phone_number, created_at
`

type UpdateEmployeeParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Email       string `json:"email"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, updateEmployee,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.CreatedAt,
	)
	return i, err
}
